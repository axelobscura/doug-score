{"version":3,"sources":["config.js","helpers/spreadsheet.js","components/Carlist.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["config","apiKey","discoveryDocs","spreadsheetId","load","callback","window","gapi","client","sheets","spreadsheets","values","get","range","then","response","cars","result","map","car","year","make","model","error","Carlist","state","initClient","init","_this","onLoad","data","setState","this","_this$state","react_default","a","createElement","i","key","Component","App","className","src","logo","alt","components_Carlist","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"yOAAeA,SAAA,CACbC,OAAQ,0CACRC,cAAe,CAAC,4DAChBC,cAAe,iDCwBFC,MAzBf,SAAcC,GACZC,OAAOC,KAAKC,OAAOJ,KAAK,SAAU,KAAM,WACtCE,OAAOC,KAAKC,OAAOC,OAAOC,aAAaC,OAAOC,IAAI,CAChDT,cAAeH,EAAOG,cACtBU,MAAO,gBAERC,KACC,SAAAC,GACE,IACMC,EADOD,EAASE,OAAON,OACXO,IAAI,SAAAC,GAAG,MAAK,CAC5BC,KAAMD,EAAI,GACVE,KAAMF,EAAI,GACVG,MAAOH,EAAI,OACN,GACPd,EAAS,CACPW,UAGJ,SAAAD,GACEV,GAAS,EAAOU,EAASE,OAAOM,YCiCzBC,6MAhDbC,MAAQ,CACNT,KAAM,GACNO,MAAO,QAOTG,WAAa,WACXpB,OAAOC,KAAKC,OAAOmB,KAAK,CACtB1B,OAAQD,EAAOC,OACfC,cAAeF,EAAOE,gBAEvBY,KAAK,WACJV,EAAKwB,EAAKC,aAIdA,OAAS,SAACC,EAAMP,GACd,GAAGO,EAAK,CACN,IAAMd,EAAOc,EAAKd,KAClBY,EAAKG,SAAS,CAACf,cAEfY,EAAKG,SAAS,CAACR,8FAlBjBjB,OAAOC,KAAKH,KAAK,SAAU4B,KAAKN,6CAuB1B,IAAAO,EAEkBD,KAAKP,MAArBT,EAFFiB,EAEEjB,KACR,OAHMiB,EAEQV,MAELW,EAAAC,EAAAC,cAAA,WAAMJ,KAAKP,MAAMF,OAIxBW,EAAAC,EAAAC,cAAA,UACGpB,EAAKE,IAAI,SAACC,EAAKkB,GAAN,OACRH,EAAAC,EAAAC,cAAA,MAAIE,IAAKD,GACNlB,EAAIC,KADP,IACcD,EAAIE,KADlB,IACyBF,EAAIG,iBA1CjBiB,aCcPC,mLAXX,OACEN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,UAAQK,UAAU,cAChBP,EAAAC,EAAAC,cAAA,OAAKM,IAAKC,IAAMF,UAAU,WAAWG,IAAI,UAE3CV,EAAAC,EAAAC,cAACS,EAAD,cAPUN,aCOEO,QACW,cAA7BxC,OAAOyC,SAASC,UAEe,UAA7B1C,OAAOyC,SAASC,UAEhB1C,OAAOyC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3C,KAAK,SAAA4C,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.db2fd962.chunk.js","sourcesContent":["export default {\n  apiKey: \"AIzaSyC1_X14R_VLLWaed70EpVZ3vAjE6JJ18jo\",\n  discoveryDocs: [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"],\n  spreadsheetId: \"1KTArYwDWrn52fnc7B12KvjRb6nmcEaU6gXYehWfsZSo\"\n};","import config from '../config';\n\nfunction load(callback){\n  window.gapi.client.load(\"sheets\", \"v4\", ()=>{\n    window.gapi.client.sheets.spreadsheets.values.get({\n      spreadsheetId: config.spreadsheetId,\n      range: \"Sheet1!A4:T\"\n    })\n    .then(\n      response => {\n        const data = response.result.values;\n        const cars = data.map(car => ({\n          year: car[0],\n          make: car[1],\n          model: car[2]\n        })) || [];\n        callback({\n          cars\n        });\n      },\n      response => {\n        callback(false, response.result.error);\n      }\n    )\n  });\n}\n\nexport default load;","import React, { Component } from 'react';\nimport config from '../config';\nimport load from '../helpers/spreadsheet';\n\nclass Carlist extends Component {\n\n  state = {\n    cars: [],\n    error: null\n  }\n\n  componentDidMount(){\n    window.gapi.load(\"client\", this.initClient);\n  }\n\n  initClient = () => {\n    window.gapi.client.init({\n      apiKey: config.apiKey,\n      discoveryDocs: config.discoveryDocs\n    })\n    .then(()=>{\n      load(this.onLoad);\n    })\n  }\n\n  onLoad = (data, error) => {\n    if(data){\n      const cars = data.cars;\n      this.setState({cars});\n    } else {\n      this.setState({error});\n    }\n  }\n\n\n  render(){\n\n    const { cars, error } = this.state;\n    if(error){\n      return <div>{this.state.error}</div>\n    }\n\n    return (\n      <ul>\n        {cars.map((car, i) => (\n          <li key={i}>\n            {car.year} {car.make} {car.model}\n          </li>\n        ))}\n      </ul>\n    )\n  }\n}\n\nexport default Carlist;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Carlist from './components/Carlist';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </header>\n        <Carlist />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}